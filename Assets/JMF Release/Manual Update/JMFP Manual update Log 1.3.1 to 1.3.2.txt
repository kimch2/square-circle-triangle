Manual changes for JMFP 1.3.1 to -> 1.3.2
------------------------------


// codes below does not represent the complete script... just areas of which changes has been made...


// -----------
// GameManager script
// -----------

// declare new variable ** used by detectPossibleMoves() function
[HideInInspector] public bool isCheckingPossibleMoves = false;



// moves detector phase 1
	void detectPossibleMoves() {
		
		//checks through each board boxes
		if(!checkedPossibleMove && !isCheckingPossibleMoves){
			isCheckingPossibleMoves = true;
			for (int x = 0; x < boardWidth ; x++){
				for (int y = 0; y < boardHeight ; y++) {
					if( board[x,y].isBeingDelayed || board[x,y].isFalling || board[x,y].isActive ) {
						isCheckingPossibleMoves = false;
						return; // do not continue, wait for board to clear and stabilize
					}
				}
			}
			checkedPossibleMove = true; // once we checked, no need to check again until needed

			JMFRelay.onBoardStabilize();

			List<GameObject> suggestedPieces = new List<GameObject>(); // to hold all the possible moves
			
			for (int x = 0; x < boardWidth ; x++){
				for (int y = 0; y < boardHeight ; y++) {
					if( board[x,y].isFilled && board[x,y].panel.isSwitchable() &&
						checkNeighbourMatch(x,y,board[x,y].piece.slotNum) ) {
						// recognize possible moves and save the piece location
						suggestedPieces.Add(board[x,y].piece.thisPiece);
					}
				}
			}
			
			if (suggestedPieces.Count == 0) { // no more possible moves
				StartCoroutine( resetBoard() ); // reset board in co-routine mode for delayed event
			}
			else {
				// suggest a random piece for next possible move to player
				suggestedPiece = ((GameObject) suggestedPieces[Random.Range(0,suggestedPieces.Count)]);
				suggestedPieces.Clear(); // remove stored memory
				pieceOriginalSize = suggestedPiece.transform.localScale; // remember the current size
				newSize = Vector3.Scale(pieceOriginalSize,new Vector3(1.35f,1.35f,1f)); // the scaling size
				StartCoroutine("suggestPiece"); // its a string coroutine so that we can use StopCoroutine!
				isCheckingPossibleMoves = false;
			}
		}
	}



// resets the board due to no more moves
	IEnumerator resetBoard() {
		animScript.doAnim(animType.NOMOREMOVES,0,0);
		JMFRelay.onNoMoreMoves();
		yield return new WaitForSeconds(noMoreMoveResetTime);
		notifyBoardHasChanged(); // reset the board status
		// for the board width size
		for( int x = 0; x < boardWidth; x++) {
			// for the board height size
			for( int y = 0; y < boardHeight; y++) {
				//reset the pieces with a random type..
				board[x,y].reset(pieceTypes[0], ranType());
			}
		}
		JMFRelay.onComboEnd();
		JMFRelay.onBoardReset();
		isCheckingPossibleMoves = false;
	}



// destroys the box after a given time so that it looks cooler - object being marked for delayed destruction
	public IEnumerator destroyInTimeMarked(int x, int y, float delay, int mScore){
		if(!board[x,y].isFilled){
			board[x,y].isFalling = false;
			yield break;
		}

		// save the piece reference
		GamePiece refPiece = board[x,y].piece;

		// mark the piece as to be destroyed later
		refPiece.markedForDestroy = true;
		refPiece.thisPiece.GetComponent<PieceTracker>().enabled = false; // no longer movable
		
		yield return new WaitForSeconds(delay); // wait for it...
		
		if(refPiece.master.isFilled){
			increaseScore( mScore, refPiece.master.arrayRef[0], refPiece.master.arrayRef[1] ); // add to the score
		}
		
		refPiece.master.destroyMarked();

		if(!refPiece.master.panel.isDestructible()){ // if the panel is a solid type with no piece to destroy...
			refPiece.master.panelHit(); // got hit by power attack~!
		}
	}




// gravity effect after falling down - simulates easeInBack
	Vector3[] getVectorEffect(int x, int y){
		
		float offset = 0.35f * size; // the amount of offset you wish for effect
		Vector3 position = board[x,y].localPos;
		if(board[x,y].isFilled){
			position.z = board[x,y].piece.thisPiece.transform.position.z; // ensure the Z order stays when tweening
		}

		Vector3 pos;
		
		switch(currentGravity){
		case Gravity.DOWN : default :
			pos = new Vector3( 0f , offset, 0f);
			return new Vector3[] {position, (position - pos ), position, position};
		case Gravity.UP :
			pos = new Vector3( 0f , offset/2, 0f);
			return new Vector3[] {(position + pos), position, position, position };
		case Gravity.LEFT :
			pos = new Vector3( offset/2, 0f , 0f);
			return new Vector3[] {(position - pos), position, position, position };
		case Gravity.RIGHT :
			pos = new Vector3( offset/2, 0f , 0f);
			return new Vector3[] {(position + pos), position, position, position };
		}
	}



// used to determine the number of unfilled board boxes beyond the current panel
	// limited by panels that block gravity
	public int countBlockedUnfilled(int x, int y, bool ignoreTotalCount){
		int count = 0;
		switch(currentGravity){
		case Gravity.UP :
			for(int cols = y+1; cols < boardHeight; cols++){
				if(board[x,cols].replacementNeeded() ){
					count++;
					if(ignoreTotalCount && count > 0 ) return count; // performance saver, reduce redundant check
				}
				if(!board[x,cols].panel.allowsGravity() ){
					break; // do not check further as it cannot pass through here
				}
				if(!board[x,cols].panel.pnd.hasStartingPiece ) count--;
			}
			break;
		case Gravity.DOWN :
			for(int cols = y-1; cols >= 0 ; cols--){
				if(board[x,cols].replacementNeeded() ){
					count++;
					if(ignoreTotalCount && count > 0 ) return count; // performance saver, reduce redundant check
				}
				if(!board[x,cols].panel.allowsGravity() ){
					break; // do not check further as it cannot pass through here
				}
				if(!board[x,cols].panel.pnd.hasStartingPiece ) count--;
			}
			break;
		case Gravity.RIGHT : 
			for(int rows = x+1; rows < boardWidth; rows++){
				if(board[rows,y].replacementNeeded() ){
					count++;
					if(ignoreTotalCount && count > 0 ) return count; // performance saver, reduce redundant check
				}
				if(!board[rows,y].panel.allowsGravity() ){
					break; // do not check further as it cannot pass through here
				}
				if(!board[rows,y].panel.pnd.hasStartingPiece ) count--;
			}
			break;
		case Gravity.LEFT :
			for(int rows = x-1; rows >=0 ; rows--){
				if(board[rows,y].replacementNeeded() ){
					count++;
					if(ignoreTotalCount && count > 0 ) return count; // performance saver, reduce redundant check
				}
				if(!board[rows,y].panel.allowsGravity() ){
					break; // do not check further as it cannot pass through here
				}
				if(!board[rows,y].panel.pnd.hasStartingPiece ) count--;
			}
			break;
		}
		return count;
	}



// function to lock a piece from being destroyed with a cooldown timer
	public IEnumerator lockJustCreated(int x, int y, float time){
		// lock the piece so that it isnt destroyed so fast
		GamePiece refPiece = null;
		if(board[x,y].isFilled){
			refPiece = board[x,y].piece;
			refPiece.justCreated = true;
			refPiece.master.isActive = false;
			yield return new WaitForSeconds(time); // wait for it...
			// un-lock the piece again
			refPiece.justCreated = false;
			refPiece.master.isActive = true;
		}
	}



// ------------------
// Board script
// ------------------

// old 'justCreated' bool to be removed
public bool justCreated = false;
// new 'justCreated' bool to replace the old
public bool justCreated { 
get{if(isFilled)return piece.justCreated; return false;} 
set{if(isFilled) piece.justCreated = value;} }



// destroy the piece in this board
	public void destroyBox () {
		if(!justCreated && panel.isDestructible() && isFilled && !piece.markedForDestroy) {
			if( piece.pd.isDestructible ){ // valid for destroy
				if(piece.pd.performPower(arrayRef) ) { // if true, mark for delayed destroy
					piece.markedForDestroy = true;
				}
				if(!piece.markedForDestroy){ // if not marked for delayed destroy, destroy immediately
					piece.pd.splashDamage(this); // virtual function call ( if any )
					piece.destroy();
					isFalling = false;
					panelHit(); // reduce panel durability ( if possible )
				}
			} else {
				panelHit(); // reduce panel durability ( if possible )
			}
		}
	}



// ------------------
// GamePiece script
// ------------------

// new 'justCreated' bool
public bool justCreated = false;  // for match create power piece so that it doesnt get destroyed instantly

